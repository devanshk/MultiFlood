"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyHelperUtil = void 0;
const colorette_1 = require("colorette");
const fs_1 = __importDefault(require("fs"));
const logger_1 = __importDefault(require("webpack-cli/lib/utils/logger"));
const path_1 = __importDefault(require("path"));
const yeoman_environment_1 = __importDefault(require("yeoman-environment"));
const yeoman_generator_1 = __importDefault(require("yeoman-generator"));
const scaffold_1 = require("./scaffold");
const get_package_manager_1 = require("webpack-cli/lib/utils/get-package-manager");
const DEFAULT_WEBPACK_CONFIG_FILENAME = 'webpack.config.js';
/**
 *
 * Looks up the webpack.config in the user's path and runs a given
 * generator scaffold followed up by a transform
 *
 * @param {String} action â€” action to be done (add, remove, update, init)
 * @param {Class} generator - Yeoman generator class
 * @param {String} configFile - Name of the existing/default webpack configuration file
 * @param {Array} packages - List of packages to resolve
 * @returns {Function} runTransform - Returns a transformation instance
 */
function modifyHelperUtil(action, generator, configFile = DEFAULT_WEBPACK_CONFIG_FILENAME, packages, autoSetDefaults = false, generateConfig = false) {
    const configPath = null;
    const env = yeoman_environment_1.default.createEnv('webpack', null);
    const generatorName = 'webpack-init-generator';
    if (!generator) {
        generator = class extends yeoman_generator_1.default {
            initializing() {
                packages.forEach((pkgPath) => {
                    return this.composeWith(require.resolve(pkgPath), {});
                });
            }
        };
    }
    // this is the default name that the yeoman generator uses when writing
    // to .yo-rc.json
    // see: https://github.com/yeoman/generator/blob/v4.5.0/lib/index.js#L773
    let packageName = '*';
    try {
        const packagePath = path_1.default.resolve(process.cwd(), 'package.json');
        if (fs_1.default.existsSync(packagePath)) {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const packageData = require(packagePath);
            if (packageData && packageData.name) {
                packageName = packageData.name;
            }
        }
    }
    catch (err) {
        logger_1.default.error('\nYour package.json was incorrectly formatted.\n');
        Error.stackTraceLimit = 0;
        process.exitCode = 2;
    }
    env.registerStub(generator, generatorName);
    env.run(generatorName, {
        configFile,
        autoSetDefaults,
    }, () => {
        let configModule;
        let finalConfig = {
            config: {},
        };
        try {
            const confPath = path_1.default.resolve(process.cwd(), '.yo-rc.json');
            configModule = require(confPath);
        }
        catch (err) {
            logger_1.default.error('\nCould not find a yeoman configuration file (.yo-rc.json).\n');
            logger_1.default.error("\nPlease make sure to use 'this.config.set('configuration', this.configuration);' at the end of the generator.\n");
            Error.stackTraceLimit = 0;
            process.exitCode = 2;
        }
        try {
            // the configuration stored in .yo-rc.json should already be in the correct
            // WebpackScaffoldObject format
            // it is labeled with the name property from the user's package.json, meaning
            // we should simply access that value, rather than iterating through all
            // the configs that are stored in .yo-rc.json
            if (configModule[packageName] && configModule[packageName].configuration) {
                finalConfig = configModule[packageName].configuration;
            }
        }
        catch (err) {
            logger_1.default.error(err);
            logger_1.default.error(`${err.stack}\n`);
            logger_1.default.error('Your yeoman configuration file (.yo-rc.json) was incorrectly formatted. Deleting it may fix the problem.\n');
            Error.stackTraceLimit = 0;
            process.exitCode = 2;
        }
        try {
            const transformConfig = Object.assign({
                configFile: !configPath ? null : fs_1.default.readFileSync(configPath, 'utf8'),
                configPath,
            }, finalConfig);
            if (finalConfig.usingDefaults && finalConfig.usingDefaults === true) {
                const runCommand = get_package_manager_1.getPackageManager() === 'yarn' ? 'yarn build' : 'npm run build';
                logger_1.default.log(`\nYou can now run ${colorette_1.green(runCommand)} to bundle your application!\n`);
            }
            // scaffold webpack config file from using .yo-rc.json
            return scaffold_1.runTransform(transformConfig, 'init', generateConfig);
        }
        catch (err) {
            logger_1.default.error(err);
            process.exitCode = 2;
        }
    });
}
exports.modifyHelperUtil = modifyHelperUtil;
